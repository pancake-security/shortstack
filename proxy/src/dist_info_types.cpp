/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "dist_info_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




dist_info::~dist_info() throw() {
}


void dist_info::__set_num_keys(const int32_t val) {
  this->num_keys = val;
}

void dist_info::__set_dummy_key(const std::string& val) {
  this->dummy_key = val;
}

void dist_info::__set_key_to_number_of_replicas(const std::map<std::string, int32_t> & val) {
  this->key_to_number_of_replicas = val;
}

void dist_info::__set_replica_to_label(const std::map<std::string, int32_t> & val) {
  this->replica_to_label = val;
}

void dist_info::__set_fake_distribution(const std::map<std::string, double> & val) {
  this->fake_distribution = val;
}

void dist_info::__set_real_distribution(const std::map<std::string, double> & val) {
  this->real_distribution = val;
}
std::ostream& operator<<(std::ostream& out, const dist_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t dist_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_keys);
          this->__isset.num_keys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dummy_key);
          this->__isset.dummy_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->key_to_number_of_replicas.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              int32_t& _val6 = this->key_to_number_of_replicas[_key5];
              xfer += iprot->readI32(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.key_to_number_of_replicas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->replica_to_label.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _ktype8;
            ::apache::thrift::protocol::TType _vtype9;
            xfer += iprot->readMapBegin(_ktype8, _vtype9, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              std::string _key12;
              xfer += iprot->readString(_key12);
              int32_t& _val13 = this->replica_to_label[_key12];
              xfer += iprot->readI32(_val13);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.replica_to_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->fake_distribution.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _ktype15;
            ::apache::thrift::protocol::TType _vtype16;
            xfer += iprot->readMapBegin(_ktype15, _vtype16, _size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              std::string _key19;
              xfer += iprot->readString(_key19);
              double& _val20 = this->fake_distribution[_key19];
              xfer += iprot->readDouble(_val20);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.fake_distribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->real_distribution.clear();
            uint32_t _size21;
            ::apache::thrift::protocol::TType _ktype22;
            ::apache::thrift::protocol::TType _vtype23;
            xfer += iprot->readMapBegin(_ktype22, _vtype23, _size21);
            uint32_t _i25;
            for (_i25 = 0; _i25 < _size21; ++_i25)
            {
              std::string _key26;
              xfer += iprot->readString(_key26);
              double& _val27 = this->real_distribution[_key26];
              xfer += iprot->readDouble(_val27);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.real_distribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t dist_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("dist_info");

  xfer += oprot->writeFieldBegin("num_keys", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num_keys);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dummy_key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dummy_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key_to_number_of_replicas", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->key_to_number_of_replicas.size()));
    std::map<std::string, int32_t> ::const_iterator _iter28;
    for (_iter28 = this->key_to_number_of_replicas.begin(); _iter28 != this->key_to_number_of_replicas.end(); ++_iter28)
    {
      xfer += oprot->writeString(_iter28->first);
      xfer += oprot->writeI32(_iter28->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replica_to_label", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->replica_to_label.size()));
    std::map<std::string, int32_t> ::const_iterator _iter29;
    for (_iter29 = this->replica_to_label.begin(); _iter29 != this->replica_to_label.end(); ++_iter29)
    {
      xfer += oprot->writeString(_iter29->first);
      xfer += oprot->writeI32(_iter29->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fake_distribution", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->fake_distribution.size()));
    std::map<std::string, double> ::const_iterator _iter30;
    for (_iter30 = this->fake_distribution.begin(); _iter30 != this->fake_distribution.end(); ++_iter30)
    {
      xfer += oprot->writeString(_iter30->first);
      xfer += oprot->writeDouble(_iter30->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("real_distribution", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->real_distribution.size()));
    std::map<std::string, double> ::const_iterator _iter31;
    for (_iter31 = this->real_distribution.begin(); _iter31 != this->real_distribution.end(); ++_iter31)
    {
      xfer += oprot->writeString(_iter31->first);
      xfer += oprot->writeDouble(_iter31->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(dist_info &a, dist_info &b) {
  using ::std::swap;
  swap(a.num_keys, b.num_keys);
  swap(a.dummy_key, b.dummy_key);
  swap(a.key_to_number_of_replicas, b.key_to_number_of_replicas);
  swap(a.replica_to_label, b.replica_to_label);
  swap(a.fake_distribution, b.fake_distribution);
  swap(a.real_distribution, b.real_distribution);
  swap(a.__isset, b.__isset);
}

dist_info::dist_info(const dist_info& other32) {
  num_keys = other32.num_keys;
  dummy_key = other32.dummy_key;
  key_to_number_of_replicas = other32.key_to_number_of_replicas;
  replica_to_label = other32.replica_to_label;
  fake_distribution = other32.fake_distribution;
  real_distribution = other32.real_distribution;
  __isset = other32.__isset;
}
dist_info& dist_info::operator=(const dist_info& other33) {
  num_keys = other33.num_keys;
  dummy_key = other33.dummy_key;
  key_to_number_of_replicas = other33.key_to_number_of_replicas;
  replica_to_label = other33.replica_to_label;
  fake_distribution = other33.fake_distribution;
  real_distribution = other33.real_distribution;
  __isset = other33.__isset;
  return *this;
}
void dist_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "dist_info(";
  out << "num_keys=" << to_string(num_keys);
  out << ", " << "dummy_key=" << to_string(dummy_key);
  out << ", " << "key_to_number_of_replicas=" << to_string(key_to_number_of_replicas);
  out << ", " << "replica_to_label=" << to_string(replica_to_label);
  out << ", " << "fake_distribution=" << to_string(fake_distribution);
  out << ", " << "real_distribution=" << to_string(real_distribution);
  out << ")";
}



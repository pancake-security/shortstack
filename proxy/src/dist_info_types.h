/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dist_info_TYPES_H
#define dist_info_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




class dist_info;

typedef struct _dist_info__isset {
  _dist_info__isset() : num_keys(false), dummy_key(false), key_to_number_of_replicas(false), replica_to_label(false), fake_distribution(false), real_distribution(false) {}
  bool num_keys :1;
  bool dummy_key :1;
  bool key_to_number_of_replicas :1;
  bool replica_to_label :1;
  bool fake_distribution :1;
  bool real_distribution :1;
} _dist_info__isset;

class dist_info : public virtual ::apache::thrift::TBase {
 public:

  dist_info(const dist_info&);
  dist_info& operator=(const dist_info&);
  dist_info() : num_keys(0), dummy_key() {
  }

  virtual ~dist_info() throw();
  int32_t num_keys;
  std::string dummy_key;
  std::map<std::string, int32_t>  key_to_number_of_replicas;
  std::map<std::string, int32_t>  replica_to_label;
  std::map<std::string, double>  fake_distribution;
  std::map<std::string, double>  real_distribution;

  _dist_info__isset __isset;

  void __set_num_keys(const int32_t val);

  void __set_dummy_key(const std::string& val);

  void __set_key_to_number_of_replicas(const std::map<std::string, int32_t> & val);

  void __set_replica_to_label(const std::map<std::string, int32_t> & val);

  void __set_fake_distribution(const std::map<std::string, double> & val);

  void __set_real_distribution(const std::map<std::string, double> & val);

  bool operator == (const dist_info & rhs) const
  {
    if (!(num_keys == rhs.num_keys))
      return false;
    if (!(dummy_key == rhs.dummy_key))
      return false;
    if (!(key_to_number_of_replicas == rhs.key_to_number_of_replicas))
      return false;
    if (!(replica_to_label == rhs.replica_to_label))
      return false;
    if (!(fake_distribution == rhs.fake_distribution))
      return false;
    if (!(real_distribution == rhs.real_distribution))
      return false;
    return true;
  }
  bool operator != (const dist_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dist_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(dist_info &a, dist_info &b);

std::ostream& operator<<(std::ostream& out, const dist_info& obj);



#endif

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef block_request_service_H
#define block_request_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "proxy_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class block_request_serviceIf {
 public:
  virtual ~block_request_serviceIf() {}
  virtual void chain_request(const sequence_id& seq, const int32_t block_id, const std::vector<std::string> & arguments) = 0;
};

class block_request_serviceIfFactory {
 public:
  typedef block_request_serviceIf Handler;

  virtual ~block_request_serviceIfFactory() {}

  virtual block_request_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(block_request_serviceIf* /* handler */) = 0;
};

class block_request_serviceIfSingletonFactory : virtual public block_request_serviceIfFactory {
 public:
  block_request_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<block_request_serviceIf>& iface) : iface_(iface) {}
  virtual ~block_request_serviceIfSingletonFactory() {}

  virtual block_request_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(block_request_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<block_request_serviceIf> iface_;
};

class block_request_serviceNull : virtual public block_request_serviceIf {
 public:
  virtual ~block_request_serviceNull() {}
  void chain_request(const sequence_id& /* seq */, const int32_t /* block_id */, const std::vector<std::string> & /* arguments */) {
    return;
  }
};

typedef struct _block_request_service_chain_request_args__isset {
  _block_request_service_chain_request_args__isset() : seq(false), block_id(false), arguments(false) {}
  bool seq :1;
  bool block_id :1;
  bool arguments :1;
} _block_request_service_chain_request_args__isset;

class block_request_service_chain_request_args {
 public:

  block_request_service_chain_request_args(const block_request_service_chain_request_args&);
  block_request_service_chain_request_args& operator=(const block_request_service_chain_request_args&);
  block_request_service_chain_request_args() : block_id(0) {
  }

  virtual ~block_request_service_chain_request_args() throw();
  sequence_id seq;
  int32_t block_id;
  std::vector<std::string>  arguments;

  _block_request_service_chain_request_args__isset __isset;

  void __set_seq(const sequence_id& val);

  void __set_block_id(const int32_t val);

  void __set_arguments(const std::vector<std::string> & val);

  bool operator == (const block_request_service_chain_request_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(block_id == rhs.block_id))
      return false;
    if (!(arguments == rhs.arguments))
      return false;
    return true;
  }
  bool operator != (const block_request_service_chain_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const block_request_service_chain_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class block_request_service_chain_request_pargs {
 public:


  virtual ~block_request_service_chain_request_pargs() throw();
  const sequence_id* seq;
  const int32_t* block_id;
  const std::vector<std::string> * arguments;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class block_request_serviceClient : virtual public block_request_serviceIf {
 public:
  block_request_serviceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  block_request_serviceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void chain_request(const sequence_id& seq, const int32_t block_id, const std::vector<std::string> & arguments);
  void send_chain_request(const sequence_id& seq, const int32_t block_id, const std::vector<std::string> & arguments);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class block_request_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<block_request_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (block_request_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_chain_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  block_request_serviceProcessor(::apache::thrift::stdcxx::shared_ptr<block_request_serviceIf> iface) :
    iface_(iface) {
    processMap_["chain_request"] = &block_request_serviceProcessor::process_chain_request;
  }

  virtual ~block_request_serviceProcessor() {}
};

class block_request_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  block_request_serviceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< block_request_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< block_request_serviceIfFactory > handlerFactory_;
};

class block_request_serviceMultiface : virtual public block_request_serviceIf {
 public:
  block_request_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<block_request_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~block_request_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<block_request_serviceIf> > ifaces_;
  block_request_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<block_request_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void chain_request(const sequence_id& seq, const int32_t block_id, const std::vector<std::string> & arguments) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->chain_request(seq, block_id, arguments);
    }
    ifaces_[i]->chain_request(seq, block_id, arguments);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class block_request_serviceConcurrentClient : virtual public block_request_serviceIf {
 public:
  block_request_serviceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  block_request_serviceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void chain_request(const sequence_id& seq, const int32_t block_id, const std::vector<std::string> & arguments);
  void send_chain_request(const sequence_id& seq, const int32_t block_id, const std::vector<std::string> & arguments);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif

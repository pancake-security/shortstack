/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef l3proxy_H
#define l3proxy_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "proxy_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class l3proxyIf {
 public:
  virtual ~l3proxyIf() {}
  virtual void register_client_id(const int64_t client_id) = 0;
  virtual void l3request(const sequence_id& seq_id, const std::string& label, const std::string& value) = 0;
};

class l3proxyIfFactory {
 public:
  typedef l3proxyIf Handler;

  virtual ~l3proxyIfFactory() {}

  virtual l3proxyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(l3proxyIf* /* handler */) = 0;
};

class l3proxyIfSingletonFactory : virtual public l3proxyIfFactory {
 public:
  l3proxyIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<l3proxyIf>& iface) : iface_(iface) {}
  virtual ~l3proxyIfSingletonFactory() {}

  virtual l3proxyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(l3proxyIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<l3proxyIf> iface_;
};

class l3proxyNull : virtual public l3proxyIf {
 public:
  virtual ~l3proxyNull() {}
  void register_client_id(const int64_t /* client_id */) {
    return;
  }
  void l3request(const sequence_id& /* seq_id */, const std::string& /* label */, const std::string& /* value */) {
    return;
  }
};

typedef struct _l3proxy_register_client_id_args__isset {
  _l3proxy_register_client_id_args__isset() : client_id(false) {}
  bool client_id :1;
} _l3proxy_register_client_id_args__isset;

class l3proxy_register_client_id_args {
 public:

  l3proxy_register_client_id_args(const l3proxy_register_client_id_args&);
  l3proxy_register_client_id_args& operator=(const l3proxy_register_client_id_args&);
  l3proxy_register_client_id_args() : client_id(0) {
  }

  virtual ~l3proxy_register_client_id_args() throw();
  int64_t client_id;

  _l3proxy_register_client_id_args__isset __isset;

  void __set_client_id(const int64_t val);

  bool operator == (const l3proxy_register_client_id_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const l3proxy_register_client_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const l3proxy_register_client_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class l3proxy_register_client_id_pargs {
 public:


  virtual ~l3proxy_register_client_id_pargs() throw();
  const int64_t* client_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class l3proxy_register_client_id_result {
 public:

  l3proxy_register_client_id_result(const l3proxy_register_client_id_result&);
  l3proxy_register_client_id_result& operator=(const l3proxy_register_client_id_result&);
  l3proxy_register_client_id_result() {
  }

  virtual ~l3proxy_register_client_id_result() throw();

  bool operator == (const l3proxy_register_client_id_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const l3proxy_register_client_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const l3proxy_register_client_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class l3proxy_register_client_id_presult {
 public:


  virtual ~l3proxy_register_client_id_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _l3proxy_l3request_args__isset {
  _l3proxy_l3request_args__isset() : seq_id(false), label(false), value(false) {}
  bool seq_id :1;
  bool label :1;
  bool value :1;
} _l3proxy_l3request_args__isset;

class l3proxy_l3request_args {
 public:

  l3proxy_l3request_args(const l3proxy_l3request_args&);
  l3proxy_l3request_args& operator=(const l3proxy_l3request_args&);
  l3proxy_l3request_args() : label(), value() {
  }

  virtual ~l3proxy_l3request_args() throw();
  sequence_id seq_id;
  std::string label;
  std::string value;

  _l3proxy_l3request_args__isset __isset;

  void __set_seq_id(const sequence_id& val);

  void __set_label(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const l3proxy_l3request_args & rhs) const
  {
    if (!(seq_id == rhs.seq_id))
      return false;
    if (!(label == rhs.label))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const l3proxy_l3request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const l3proxy_l3request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class l3proxy_l3request_pargs {
 public:


  virtual ~l3proxy_l3request_pargs() throw();
  const sequence_id* seq_id;
  const std::string* label;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class l3proxyClient : virtual public l3proxyIf {
 public:
  l3proxyClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  l3proxyClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void register_client_id(const int64_t client_id);
  void send_register_client_id(const int64_t client_id);
  void recv_register_client_id();
  void l3request(const sequence_id& seq_id, const std::string& label, const std::string& value);
  void send_l3request(const sequence_id& seq_id, const std::string& label, const std::string& value);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class l3proxyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<l3proxyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (l3proxyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_register_client_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_l3request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  l3proxyProcessor(::apache::thrift::stdcxx::shared_ptr<l3proxyIf> iface) :
    iface_(iface) {
    processMap_["register_client_id"] = &l3proxyProcessor::process_register_client_id;
    processMap_["l3request"] = &l3proxyProcessor::process_l3request;
  }

  virtual ~l3proxyProcessor() {}
};

class l3proxyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  l3proxyProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< l3proxyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< l3proxyIfFactory > handlerFactory_;
};

class l3proxyMultiface : virtual public l3proxyIf {
 public:
  l3proxyMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<l3proxyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~l3proxyMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<l3proxyIf> > ifaces_;
  l3proxyMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<l3proxyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void register_client_id(const int64_t client_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->register_client_id(client_id);
    }
    ifaces_[i]->register_client_id(client_id);
  }

  void l3request(const sequence_id& seq_id, const std::string& label, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->l3request(seq_id, label, value);
    }
    ifaces_[i]->l3request(seq_id, label, value);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class l3proxyConcurrentClient : virtual public l3proxyIf {
 public:
  l3proxyConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  l3proxyConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void register_client_id(const int64_t client_id);
  int32_t send_register_client_id(const int64_t client_id);
  void recv_register_client_id(const int32_t seqid);
  void l3request(const sequence_id& seq_id, const std::string& label, const std::string& value);
  void send_l3request(const sequence_id& seq_id, const std::string& label, const std::string& value);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif

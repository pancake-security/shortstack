/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef block_response_service_H
#define block_response_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "proxy_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class block_response_serviceIf {
 public:
  virtual ~block_response_serviceIf() {}
  virtual void chain_ack(const sequence_id& seq) = 0;
};

class block_response_serviceIfFactory {
 public:
  typedef block_response_serviceIf Handler;

  virtual ~block_response_serviceIfFactory() {}

  virtual block_response_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(block_response_serviceIf* /* handler */) = 0;
};

class block_response_serviceIfSingletonFactory : virtual public block_response_serviceIfFactory {
 public:
  block_response_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<block_response_serviceIf>& iface) : iface_(iface) {}
  virtual ~block_response_serviceIfSingletonFactory() {}

  virtual block_response_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(block_response_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<block_response_serviceIf> iface_;
};

class block_response_serviceNull : virtual public block_response_serviceIf {
 public:
  virtual ~block_response_serviceNull() {}
  void chain_ack(const sequence_id& /* seq */) {
    return;
  }
};

typedef struct _block_response_service_chain_ack_args__isset {
  _block_response_service_chain_ack_args__isset() : seq(false) {}
  bool seq :1;
} _block_response_service_chain_ack_args__isset;

class block_response_service_chain_ack_args {
 public:

  block_response_service_chain_ack_args(const block_response_service_chain_ack_args&);
  block_response_service_chain_ack_args& operator=(const block_response_service_chain_ack_args&);
  block_response_service_chain_ack_args() {
  }

  virtual ~block_response_service_chain_ack_args() throw();
  sequence_id seq;

  _block_response_service_chain_ack_args__isset __isset;

  void __set_seq(const sequence_id& val);

  bool operator == (const block_response_service_chain_ack_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    return true;
  }
  bool operator != (const block_response_service_chain_ack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const block_response_service_chain_ack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class block_response_service_chain_ack_pargs {
 public:


  virtual ~block_response_service_chain_ack_pargs() throw();
  const sequence_id* seq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class block_response_serviceClient : virtual public block_response_serviceIf {
 public:
  block_response_serviceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  block_response_serviceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void chain_ack(const sequence_id& seq);
  void send_chain_ack(const sequence_id& seq);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class block_response_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<block_response_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (block_response_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_chain_ack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  block_response_serviceProcessor(::apache::thrift::stdcxx::shared_ptr<block_response_serviceIf> iface) :
    iface_(iface) {
    processMap_["chain_ack"] = &block_response_serviceProcessor::process_chain_ack;
  }

  virtual ~block_response_serviceProcessor() {}
};

class block_response_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  block_response_serviceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< block_response_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< block_response_serviceIfFactory > handlerFactory_;
};

class block_response_serviceMultiface : virtual public block_response_serviceIf {
 public:
  block_response_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<block_response_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~block_response_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<block_response_serviceIf> > ifaces_;
  block_response_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<block_response_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void chain_ack(const sequence_id& seq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->chain_ack(seq);
    }
    ifaces_[i]->chain_ack(seq);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class block_response_serviceConcurrentClient : virtual public block_response_serviceIf {
 public:
  block_response_serviceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  block_response_serviceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void chain_ack(const sequence_id& seq);
  void send_chain_ack(const sequence_id& seq);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
